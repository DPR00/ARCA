#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#   Este nodo se suscribe a una imagen de ROS, la convierte en una matriz de
#   OpenCV y la muestra en pantalla
#

import rospy
import cv2
import numpy as np
from sensor_msgs.msg import Image
from std_msgs.msg import Int32
from cv_bridge import CvBridge

###### YOLO imports ######
from utils import *
from darknet import Darknet

# Set the location and name of the cfg file
cfg_file = './cfg/yolov3.cfg'

# Set the location and name of the pre-trained weights file
weight_file = './weights/yolov3.weights'

# Set the location and name of the COCO object classes file
namesfile = 'data/coco.names'

# Load the network architecture
m = Darknet(cfg_file)

# Load the pre-trained weights
m.load_weights(weight_file)

# Load the COCO object classes
class_names = load_class_names(namesfile)

# Set the NMS threshold
nms_thresh = 0.6

# Set the IOU threshold
iou_thresh = 0.4
###### YOLO ######

class Cam(object):
    def __init__(self, topic_name="camera_frame"):
        self.bridge = CvBridge()
        self.image = np.zeros((10,10))
        isub = rospy.Subscriber(topic_name, Image, self.image_callback)

    def image_callback(self, img):
        self.image = self.bridge.imgmsg_to_cv2(img, "bgr8")

    def get_image(self):
        return self.image

face_cascade = cv2.CascadeClassifier('haarcascade_lowerbody.xml')

# Inicializar el nodo de ROS
rospy.init_node('camera_node')

# Objeto que se suscribe al tópico de la cámara
# topic_name = "/head_camera/head_camera/image_raw" # ARCA
topic_name = "/camera/rgb/image_raw"
cam = Cam(topic_name)

# Tópico para publicar una imagen de salida
topic_pub = 'image_out'
pubimg = rospy.Publisher(topic_pub, Image, queue_size=10)

# Tópico para publicar que se detectó una persona
topic_pub2 = 'persona'
pub_persona = rospy.Publisher(topic_pub2, Int32, queue_size=10)

# Frecuencia del bucle principal
freq = 10
rate = rospy.Rate(freq)
# Bucle principal
while not rospy.is_shutdown():
    persona = 0
    # Obtener la imagen del tópico de ROS en formato de OpenCV
    I = cam.get_image()
    if I.dtype == "uint8":
        # Convert the image to RGB
        original_image = cv2.cvtColor(I, cv2.COLOR_BGR2RGB)
        # Get the width and height of the image
        width = original_image.shape[1]
        height = original_image.shape[0]

        # We resize the image to the input width and height of the first layer of the network.    
        resized_image = cv2.resize(original_image, (m.width, m.height))

        # Detect objects in the image
        boxes = detect_objects(m, resized_image, iou_thresh, nms_thresh)
        
        # Print the objects found and the confidence level
        print_objects(boxes, class_names)

        # Draw the bounding boxes on the image
        for i in range(len(boxes)):
            box = boxes[i]
            # Get the (x,y) pixel coordinates of the lower-left and lower-right corners
            # of the bounding box relative to the size of the image. 
            x1 = int(np.around((box[0] - box[2]/2.0) * width))
            y1 = int(np.around((box[1] - box[3]/2.0) * height))
            x2 = int(np.around((box[0] + box[2]/2.0) * width))
            y2 = int(np.around((box[1] + box[3]/2.0) * height))
            
            # Set the default rgb value to red
            rgb = (1, 0, 0)

            # Calculate the width and height of the bounding box relative to the size of the image.
            width_x = x2 - x1
            width_y = y1 - y2

            cv2.rectangle(I, (x1, y2), (x1+width_x, y2+width_y), rgb, 2)
        #cv2.rectangle(I, (boxes[i][0], boxes[i][1]), (boxes[i][0]+boxes[i][2], boxes[i][1]+boxes[i][3]), (0, 255, 0), 2)
        # for (x,y,w,h) in boxes:
        #     cv2.rectangle(I,(x,y),(x+w,y+h),(255,0,0),2)
        #     persona = 1

        # Mostrar la imagen
        cv2.imshow("Imagen Camara Turtlebot3", I)
    
    # Esperar al bucle para actualizar
    cv2.waitKey(1)
    # Opcional: publicar la imagen de salida como tópico de ROS
    pubimg.publish(cam.bridge.cv2_to_imgmsg(I))
    pub_persona.publish(persona)
    rate.sleep()

cv2.destroyAllWindows()
